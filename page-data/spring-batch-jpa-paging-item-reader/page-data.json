{"componentChunkName":"component---src-templates-blog-post-js","path":"/spring-batch-jpa-paging-item-reader/","result":{"data":{"site":{"siteMetadata":{"title":"지은이의 개발 Blog","author":"Jieun Hong"}},"markdownRemark":{"id":"aa9ce33e-99bd-5e77-bb81-76c2bea025a1","html":"<h2 id=\"문제상황\"><a href=\"#%EB%AC%B8%EC%A0%9C%EC%83%81%ED%99%A9\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제상황</h2>\n<p>예시) 온보딩 챌린지 발행을 위한 대상 유저 Reader</p>\n<ol>\n<li>JpaPagingItemReader에서 chuck 갯수로 잘라서 Sql문 실행 결과 Process</li>\n<li>Write 대상 테이블에 Insert</li>\n<li>동일한 sql문 실행시 이전 청크 write insert로 인해 작업 완료된 row는 검색되지 않음.</li>\n<li>JpaPagingItemReader는 offset과 page를 갖고있음.</li>\n<li>따라서 실행된 row 수 만큼 누락 문제 발생.</li>\n</ol>\n<h2 id=\"대표적인-itemreader\"><a href=\"#%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-itemreader\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대표적인 ItemReader</h2>\n<p><strong>1. ItemReader</strong></p>\n<p>: 처리하는 데이터를 모두 메모리에 불러와 저장하고,  chuck 단위로 process를 진행.</p>\n<p><strong>2. Database Reader</strong></p>\n<ul>\n<li><strong>Cursor 기반 ItemReader 구현체</strong></li>\n</ul>\n<p>: Database에서 데이터를 Streaming ( ex. literator, next() )</p>\n<p>(JpaCursorItemReader의 경우 데이터를 DB에서 모두 읽고 서비스 인스턴스에서 직접 Iterator로 cursor로 동작하는 것처럼 흉내 내는 방식)</p>\n<p>(할거면 JdbcCursorItemReader 혹은 HibernateCursorItemReader를 사용 다만</p>\n<p>“ Cursor는 하나의 Connection으로 Batch가 끝날때까지 사용되기 때문에 Batch가 끝나기전에 Database와 어플리케이션의 Connection이 먼저 끊어질수 있습니다. “)</p>\n<ul>\n<li><strong>Paging 기반 ItemReader 구현체</strong></li>\n</ul>\n<p>: 페이지 단위로 한번에 데이터를 조회 (page, offset ..)</p>\n<p>(Chuck마다 새로 select)</p>\n<h2 id=\"해결방법\"><a href=\"#%ED%95%B4%EA%B2%B0%EB%B0%A9%EB%B2%95\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결방법</h2>\n<p><strong>1. Cursor Item Reader 사용</strong></p>\n<p>: 데이터를 모두 읽은 상태에서 차례대로 가져오기 때문에 데이터의 변경사항이 적용되지 않음.</p>\n<p><strong>2. JpaPagingItemReader에서 page를 무조건 0으로 override</strong></p>\n<p>: 변경사항이 반영된 row는 빠지고 신규 row들만 select</p>\n<p><strong>3. ZeroOffsetItemReader 기반</strong></p>\n<p>: pk id로 order by를 한 뒤 offset은 항상 0, 읽었던 마지막 id값을 기억해 그 이후부터 실행.</p>\n<p>: MySql에서 예를들어 offset이 10000, limit가 50인 경우. 실제로는 10050row를 select 한 뒤 10000 row를 버리는 방식이라 성능에 문제가 있음. 이것을 개선하기 위해 만들어진 reader</p>\n<h2 id=\"관련-문서\"><a href=\"#%EA%B4%80%EB%A0%A8-%EB%AC%B8%EC%84%9C\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>관련 문서</h2>\n<p><a href=\"https://jojoldu.tistory.com/336\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jojoldu.tistory.com/336</a></p>\n<p><a href=\"https://jojoldu.tistory.com/337\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jojoldu.tistory.com/337</a></p>\n<p><a href=\"https://tech.kakaopay.com/post/ifkakao2022-batch-performance-read/#zerooffsetitemreader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://tech.kakaopay.com/post/ifkakao2022-batch-performance-read/#zerooffsetitemreader</a></p>\n<p><a href=\"https://jojoldu.tistory.com/528\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jojoldu.tistory.com/528</a></p>\n<p><a href=\"https://www.eversql.com/faster-pagination-in-mysql-why-order-by-with-limit-and-offset-is-slow/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.eversql.com/faster-pagination-in-mysql-why-order-by-with-limit-and-offset-is-slow/</a></p>","timeToRead":2,"frontmatter":{"title":"Spring JpaItemPagingReader row update시 reader 누락 문제","date":"June 01, 2023","spoiler":"","cta":"Spring"},"fields":{"slug":"/spring-batch-jpa-paging-item-reader/","langKey":"en"}}},"pageContext":{"slug":"/spring-batch-jpa-paging-item-reader/","previous":{"fields":{"slug":"/spring-cloud-stream-rabbit-mq/","langKey":"en","directoryName":"spring-cloud-stream-rabbit-mq"},"frontmatter":{"title":"Spring Cloud Stream + RabbitMQ 사용해보기"}},"next":null,"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}